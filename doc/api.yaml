openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_getAllUsers
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
      tags:
        - User
    post:
      operationId: UserController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: body does not contain required fields
      tags:
        - User
  /user/{id}:
    get:
      operationId: UserController_getUserById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - User
    put:
      operationId: UserController_updatePassword
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: id must be valid uuid or body does not contain required fields
        '403':
          description: Old password is incorrect
        '404':
          description: record not found
      tags:
        - User
    delete:
      operationId: UserController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: user is found and deleted
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - User
  /artist:
    get:
      operationId: ArtistController_getAllArtists
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistResponse'
      tags:
        - Artist
    post:
      operationId: ArtistController_createArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: body does not contain required fields
      tags:
        - Artist
  /artist/{id}:
    get:
      operationId: ArtistController_getArtistById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Artist
    put:
      operationId: ArtistController_updateArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: id must be valid uuid or body does not contain required fields
        '404':
          description: record not found
      tags:
        - Artist
    delete:
      operationId: ArtistController_deleteArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: artist is found and deleted
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Artist
  /favs:
    get:
      operationId: FavoritesController_getAllFavorites
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
      tags:
        - Favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addFavoriteTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '400':
          description: id must be valid uuid
        '422':
          description: record whith this id doesn't exist
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_deleteFavoriteTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addFavoriteAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '400':
          description: id must be valid uuid
        '422':
          description: record whith this id doesn't exist
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_deleteFavoriteAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addFavoriteArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '400':
          description: id must be valid uuid
        '422':
          description: record whith this id doesn't exist
      tags:
        - Favorites
    delete:
      operationId: FavoritesController_deleteFavoriteArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Favorites
  /track:
    get:
      operationId: TrackController_getAllTracks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackResponse'
      tags:
        - Track
    post:
      operationId: TrackController_createTrack
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: body does not contain required fields
      tags:
        - Track
  /track/{id}:
    get:
      operationId: TrackController_getTrackById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Track
    put:
      operationId: TrackController_updateTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackResponse'
        '400':
          description: id must be valid uuid or body does not contain required fields
        '404':
          description: record not found
      tags:
        - Track
    delete:
      operationId: TrackController_deleteTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: track is found and deleted
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Track
  /album:
    get:
      operationId: AlbumController_getAllAlbums
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumResponse'
      tags:
        - Album
    post:
      operationId: AlbumController_createAlbum
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: body does not contain required fields
      tags:
        - Album
  /album/{id}:
    get:
      operationId: AlbumController_getAlbumById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Album
    put:
      operationId: AlbumController_updateAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumResponse'
        '400':
          description: id must be valid uuid or body does not contain required fields
        '404':
          description: record not found
      tags:
        - Album
    delete:
      operationId: AlbumController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: album is found and deleted
        '400':
          description: id must be valid uuid
        '404':
          description: record not found
      tags:
        - Album
info:
  title: REST-Service-API
  description: REST API Documentation
  version: 1.0.0
  contact: {}
tags:
  - name: Rest API
    description: ''
servers: []
components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: f010ddf0-1ada-4283-aa15-3baf461e2045
          description: uuid v4
        login:
          type: string
          example: John
        version:
          type: number
          example: 1
          description: integer number, increments on update
        createdAt:
          type: number
          example: 1675515543
          description: timestamp of creation
        updatedAt:
          type: number
          example: 1675519143
          description: timestamp of last update
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: John
        password:
          type: string
          example: password123
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: password123
        newPassword:
          type: string
          example: password1234
      required:
        - oldPassword
        - newPassword
    ArtistResponse:
      type: object
      properties:
        id:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
          description: uuid v4
        name:
          type: string
          example: John Lennon
        grammy:
          type: boolean
          example: true
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: John Lennon
        grammy:
          type: boolean
          example: true
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: John Lennon
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    AlbumResponse:
      type: object
      properties:
        id:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
          description: uuid v4
        name:
          type: string
          example: Abbey Road
        year:
          type: number
          example: 1969
        artistId:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
      required:
        - id
        - name
        - year
        - artistId
    TrackResponse:
      type: object
      properties:
        id:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
          description: uuid v4
        name:
          type: string
          example: Because
        artistId:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
        albumId:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
        duration:
          type: number
          example: 165
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    FavoritesResponse:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistResponse'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/AlbumResponse'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/TrackResponse'
      required:
        - artists
        - albums
        - tracks
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Because
        artistId:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
        albumId:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
        duration:
          type: number
          example: 165
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Because
        artistId:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
        albumId:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
        duration:
          type: number
          example: 155
      required:
        - name
        - artistId
        - albumId
        - duration
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Abbey Road
        year:
          type: number
          example: 1969
        artistId:
          type: string
          example: null
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Abbey Road
        year:
          type: number
          example: 1969
        artistId:
          type: string
          example: 2981b70c-d670-4f9c-adaa-236dbf0edbe6
      required:
        - name
        - year
        - artistId
